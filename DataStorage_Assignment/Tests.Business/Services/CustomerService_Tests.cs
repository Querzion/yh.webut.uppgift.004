using System.Linq.Expressions;
using Business.Dtos;
using Business.Factories;
using Business.Models;
using Business.Services;
using Data.Entities;
using Data.Interfaces;
using Moq;

// THESE TESTS WERE GENERATED BY CHATGPT

namespace Tests.Business.Services;

public class CustomerService_Tests
{
    private readonly Mock<ICustomerRepository> _mockRepo;
    private readonly CustomerService _customerService;

    public CustomerService_Tests()
    {
        _mockRepo = new Mock<ICustomerRepository>();
        _customerService = new CustomerService(_mockRepo.Object);
    }
    
    [Fact]
    public async Task CreateCustomerAsync_ShouldReturnBadRequest_WhenRegistrationFormIsNull()
    {
        var result = await _customerService.CreateCustomerAsync(null);
        
        Assert.False(result.Success);
        Assert.Equal(400, result.StatusCode);
        // Assert.Equal("Invalid customer registration.", result.ErrorMessage);
    }

    [Fact]
    public async Task CreateCustomerAsync_ShouldReturnAlreadyExists_WhenCustomerExists()
    {
        var form1 = new CustomerRegistrationForm { CustomerName = "Existing Customer" };
        var form2 = new CustomerRegistrationForm { CustomerName = "Existing Customer" };
        _mockRepo.Setup(repo => repo.AlreadyExistsAsync(It.IsAny<Expression<Func<CustomerEntity, bool>>>() )).ReturnsAsync(true);
        
        var result = await _customerService.CreateCustomerAsync(form2);
        
        Assert.False(result.Success);
        Assert.Equal(409, result.StatusCode);
        // Assert.Equal("A Customer with this email already exists.", result.ErrorMessage);
    }

    [Fact]
    public async Task CreateCustomerAsync_ShouldReturnOk_WhenCustomerIsCreated()
    {
        var form = new CustomerRegistrationForm { CustomerName = "New Customer" };
        _mockRepo.Setup(repo => repo.AlreadyExistsAsync(It.IsAny<Expression<Func<CustomerEntity, bool>>>() )).ReturnsAsync(false);
        _mockRepo.Setup(repo => repo.CreateAsync(It.IsAny<CustomerEntity>())).ReturnsAsync(true);
        
        var result = await _customerService.CreateCustomerAsync(form);
        
        Assert.True(result.Success);
        Assert.Equal(200, result.StatusCode);
    }

    [Fact]
    public async Task GetCustomerByIdAsync_ShouldReturnNotFound_WhenCustomerDoesNotExist()
    {
        _mockRepo.Setup(repo => repo.GetAsync(It.IsAny<Expression<Func<CustomerEntity, bool>>>())).ReturnsAsync((CustomerEntity?)null);
        
        var result = await _customerService.GetCustomerByIdAsync(1);
        
        Assert.False(result.Success);
        Assert.Equal(404, result.StatusCode);
        // Assert.Equal("Customer not found.", result.ErrorMessage);
    }

    [Fact]
    public async Task GetCustomerByIdAsync_ShouldReturnCustomer_WhenExists()
    {
        var customer = new CustomerEntity { CustomerName = "Terminal Error Incorporation" };
        _mockRepo.Setup(repo => repo.GetAsync(It.IsAny<Expression<Func<CustomerEntity, bool>>>())).ReturnsAsync(customer);
        
        var result = await _customerService.GetCustomerByIdAsync(1) as Result<Customer>;
        
        Assert.True(result.Success);
        Assert.Equal(200, result.StatusCode);
        Assert.Equal(customer.CustomerName, result.Data.CustomerName);
    }

    [Fact]
    public async Task DeleteCustomerAsync_ShouldReturnNotFound_WhenCustomerDoesNotExist()
    {
        _mockRepo.Setup(repo => repo.GetAsync(It.IsAny<Expression<Func<CustomerEntity, bool>>>())).ReturnsAsync((CustomerEntity)null);
        
        var result = await _customerService.DeleteCustomerAsync(1);
        
        Assert.False(result.Success);
        Assert.Equal(404, result.StatusCode);
        // Assert.Equal("Customer not found.", result.ErrorMessage);
    }

    [Fact]
    public async Task DeleteCustomerAsync_ShouldReturnOk_WhenCustomerIsDeleted()
    {
        var customer = new CustomerEntity { Id = 1 };
        _mockRepo.Setup(repo => repo.GetAsync(It.IsAny<Expression<Func<CustomerEntity, bool>>>())).ReturnsAsync(customer);
        _mockRepo.Setup(repo => repo.DeleteAsync(It.IsAny<CustomerEntity>())).ReturnsAsync(true);
        
        var result = await _customerService.DeleteCustomerAsync(1);
        
        Assert.True(result.Success);
        Assert.Equal(200, result.StatusCode);
    }
}